---
title: "Simpsons database cleaning"
format: html
---

## Set up

```{r}
# Load libraries 
library(tidyverse)
library(here)

# Load data 
characters <- read_csv(here("data", "simpsons_characters.csv")) 
episodes <- read_csv(here("data","simpsons_episodes.csv"))
locations <- read_csv(here("data", "simpsons_locations.csv"))
script_lines <- read_csv(here("data", "simpsons_script_lines.csv"))
```

## Data Exploration

### Characters

```{r}
glimpse(characters)

summary(characters)

print(colSums(is.na(characters)))
```


Rows: 6,722 Columns: 4

-   `id`: <dbl> datatype, character id
-   `name`: <chr>, name of character
-   `normailzed_name`: <chr>, name of character in all lower case
-   `gender`: <chr>, gender of the character

```{r}
# Check for duplicates of `id`, which will act as primary key of this table
characters |> 
  count(id) |> 
  filter(n > 1)
```



### Episodes

```{r}
glimpse(episodes)

summary(episodes)

print(colSums(is.na(episodes)))
```

Rows: 151 Columns: 14

-   `id`: <dbl>, episode id
-   `image_url`: <chr>, image url, none of links seem to be working
-   `imbd_rating`: <dbl>, episode rating from IMBD
-   `imbd_votes`: <dbl>, total number of ratings from IMBD
-   `number_in_season`: <dbl>, episode number of the particular season
-   `number_in_series`: <dbl>, episode number in series
-   `original_air_date`: <date>, date of airing
-   `original_air_year`: <dbl>, year of airing
-   `production_code`: <chr>, code for production
-   `season`: <dbl>, season number
-   `title`: <chr>, title of episode in quotes
-   `us_viewers_in_millions`: <dbl>, number of US viewers in millions
-   `video_url`: <chr>, URL for episode on Disney Plus
-   `view`: <dbl>, unknown what these views are referencing

```{r}
# Check for duplicates of `id`, which will act as primary key of this table
episodes |> 
  count(id) |> 
  filter(n > 1)
```

### Locations

```{r}
glimpse(locations)

summary(locations)

print(colSums(is.na(locations)))
```

Rows: 4,459 Columns: 3

-   `id`: <dbl>, location id number
-   `name`: <chr>, location full name
-   `normalized_name`: <chr>, location full name, lowercase

```{r}
# Check for duplicates of `id`, which will act as primary key of this table
locations |> 
  count(id) |> 
  filter(n > 1)
```

### Script lines

```{r}
glimpse(script_lines)

summary(script_lines)

print(colSums(is.na(script_lines)))
```

Rows: 31,793 Columns: 13

-   `id`: <dbl>, script line id
-   `episode_id`: <dbl>, episode id (see `episodes` df)
-   `number`: <dbl>, like an index, order of `id`
-   `raw_text`: <chr>, raw text of script line
-   `timestamp_in_ms`: <dbl>, timestamp of line in episode in milliseconds
-   `speaking_line`: <lgl>, TRUE or FALSE, TRUE = Spoken line, FALSE = unspoken script line
-   `character_id`: <dbl>, id of character (see `characters` df)
-   `location_id`: <dbl>, id of location (see `locations` df)
-   `raw_character_text`: <chr>, name of speaker as shown on script (need to check if this matches `characters$name`)
-   `raw_location_text`: <chr>, name of location where script line was said
-   `spoken_words`: <chr>, text of spoken script line, only applies when `speaking_line` = TRUE
-   `normalized_text`: <chr>, lowercase text of spoken script line, only applies when `speaking_line` = TRUE
-   `word_count`: <dbl>, number of words in spoken script line, only applies when `speaking_line` = TRUE

```{r}
# Check for duplicates of `id`, which will act as primary key of this table
script_lines |> 
  count(id) |> 
  filter(n > 1)
```

## Data cleaning 

#### characters dataset 

- Need to make sure id is in integer form
- For `characters` data frame, I want to recode the `gender` column so that it reads "Female", "Male", or "Unknown"
- Reorder rows to order by id

```{r}
# Convert datatypes to integer, recode gender column, and arrange by id 
characters <- characters |> 
  mutate(id = as.integer(id)) |> 
  mutate(gender = fct_na_value_to_level(gender, level = "Unknown"),
         gender = fct_recode(gender, Male = "m", Female = "f")) |> 
  mutate(gender = as.character(gender)) |> # convert to chr datatype
  arrange(id)

# Write cleaned character dataset to csv file 
write.csv(characters, here("data", "characters_clean.csv"), row.names=FALSE)
```


#### episodes dataset 

- leave 'imdb_rating' and 'us_viewers_in_millions' as type numeric as they will be float i n the database, and the rest of the numeric columns will be explicitly converted to integer
- order by id

```{r}
# Convert datatypes to integer and arrange by id
episodes <- episodes |> 
  mutate(id = as.integer(id),
         imdb_votes = as.integer(imdb_votes),
         number_in_season = as.integer(number_in_season),
         number_in_series = as.integer(number_in_series),
         original_air_year = as.integer(original_air_year),
         season = as.integer(season),
         views = as.integer(views)) |> 
  arrange(id)

# Write cleaned character dataset to csv file 
write.csv(episodes, here("data", "episodes_clean.csv"), row.names=FALSE)
```

#### locations dataset 

- Need to make sure id is in integer form
- arrange by id

```{r}
# Convert id datatype to integer and arrange by id
locations <- locations |> 
  mutate(id = as.integer(id)) |> 
  arrange(id)

# Write cleaned character dataset to csv file 
write.csv(locations, here("data", "locations_clean.csv"), row.names=FALSE)
```


#### script_lines dataset 

- Convert to interger: id, episode_id, number, timestamp_in_ms, character_id, location_id, word_count
- arrange by id

```{r}
script_lines <- script_lines |> 
  mutate(id = as.integer(id),
         episode_id = as.integer(episode_id),
         number = as.integer(number),
         timestamp_in_ms = as.integer(timestamp_in_ms),
         character_id = as.integer(character_id),
         location_id = as.integer(location_id),
         word_count = as.integer(word_count)) |> 
  arrange(id)
# Write cleaned character dataset to csv file 
write.csv(script_lines, here("data", "script_lines_clean.csv"), row.names=FALSE)
```

